import time
import pandas as pd
import numpy as np
import requests
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
import random  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á Sentiment Analysis
from datetime import datetime
import pytz  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Binance
def get_binance_data(symbol, interval='1m', limit=200):
    url = f'https://api.binance.com/api/v1/klines'
    params = {
        'symbol': symbol,
        'interval': interval,
        'limit': limit
    }
    response = requests.get(url, params=params)
    data = response.json()
    
    df = pd.DataFrame(data, columns=['timestamp', 'Open', 'High', 'Low', 'Close', 'Volume', 'Close_time', 'Quote_asset_volume', 'Number_of_trades', 'Taker_buy_base_asset_volume', 'Taker_buy_quote_asset_volume', 'Ignore'])
    
    # ‡πÅ‡∏õ‡∏•‡∏á timestamp ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    
    # ‡∏ï‡∏±‡πâ‡∏á‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô "Asia/Bangkok" (‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢)
    tz = pytz.timezone('Asia/Bangkok')
    df['timestamp'] = df['timestamp'].dt.tz_localize('UTC').dt.tz_convert(tz)
    
    df[['Open', 'High', 'Low', 'Close', 'Volume']] = df[['Open', 'High', 'Low', 'Close', 'Volume']].astype(float)
    
    return df

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏ï‡πà‡∏≤‡∏á‡πÜ
def compute_indicators(df):
    df['EMA50'] = df['Close'].ewm(span=50, adjust=False).mean()
    df['EMA200'] = df['Close'].ewm(span=200, adjust=False).mean()
    df['MACD'] = df['Close'].ewm(span=12, adjust=False).mean() - df['Close'].ewm(span=26, adjust=False).mean()
    df['MACD_Signal'] = df['MACD'].ewm(span=9, adjust=False).mean()
    return df

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á BlackRock
def detect_advanced_signals(df):
    signals = []
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Linear Regression (‡πÅ‡∏ö‡∏ö Polynomial)
    X = np.array(range(len(df))).reshape(-1, 1)
    y = df['Close'].values
    poly = PolynomialFeatures(degree=2)
    X_poly = poly.fit_transform(X)
    model = LinearRegression()
    model.fit(X_poly, y)
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå
    y_pred = model.predict(X_poly)
    
    # ‡∏´‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô, ‡∏ô‡∏±‡πà‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô
    if y_pred[-1] > df['Close'].iloc[-1]:
        signals.append("Uptrend Signal (Polynomial Regression)")
    
    # ‡∏ñ‡πâ‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ï‡πà‡∏≥‡∏•‡∏á, ‡∏ô‡∏±‡πà‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡∏≤‡∏•‡∏á
    elif y_pred[-1] < df['Close'].iloc[-1]:
        signals.append("Downtrend Signal (Polynomial Regression)")

    # ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å (Sentiment Analysis)
    sentiment_score = random.uniform(-1, 1)  # ‡∏à‡∏≥‡∏•‡∏≠‡∏á Sentiment Score ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á -1 (negative) ‡∏ñ‡∏∂‡∏á 1 (positive)
    if sentiment_score > 0.5:
        signals.append("Positive Sentiment")
    elif sentiment_score < -0.5:
        signals.append("Negative Sentiment")
    
    return signals

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏∏‡∏î‡πÄ‡∏Ç‡πâ‡∏≤
def calculate_entry_price(df, signals):
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
    row = df.iloc[-1]
    
    entry_price = None
    stop_loss = None
    take_profit = None
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô (Uptrend Signal)
    if 'Uptrend Signal (Polynomial Regression)' in signals:
        entry_price = row['Low']  # ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤ Low ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥
        stop_loss = row['Low'] * 0.99  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Stop Loss 1% ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤
        take_profit = row['High'] * 1.02  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Take Profit 2% ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤
        print(f"üìà ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô: ‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà {entry_price:.2f}")
        blink_signal(f"üö® ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô üö®", duration=3, signal_type="uptrend")

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡∏≤‡∏•‡∏á (Downtrend Signal)
    elif 'Downtrend Signal (Polynomial Regression)' in signals:
        entry_price = row['High']  # ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤ High ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡∏≤‡∏•‡∏á
        stop_loss = row['High'] * 1.01  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Stop Loss 1% ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤
        take_profit = row['Low'] * 0.98  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Take Profit 2% ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤
        print(f"üìâ ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡∏≤‡∏•‡∏á: ‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà {entry_price:.2f}")
        blink_signal(f"üö® ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡∏≤‡∏•‡∏á üö®", duration=3, signal_type="downtrend")
    
    if entry_price:
        return entry_price, stop_loss, take_profit
    else:
        return None, None, None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì (‡πÄ‡∏ä‡πà‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô)
def blink_signal(message, duration=1, signal_type="neutral"):
    if signal_type == "uptrend":
        color = "\033[32m"  # ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
    elif signal_type == "downtrend":
        color = "\033[31m"  # ‡∏™‡∏µ‡πÅ‡∏î‡∏á
    else:
        color = "\033[0m"  # ‡∏õ‡∏Å‡∏ï‡∏¥ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏õ‡πá‡∏ô uptrend ‡∏´‡∏£‡∏∑‡∏≠ downtrend)

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
    print(f"{color}{message}\033[0m")
    time.sleep(duration)
    print("\033[0m")  # ‡∏•‡∏ö‡∏™‡∏µ

# üîÅ ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
symbols = ['BTCUSDT', 'ETHUSDT']

while True:
    print(f"\nüïí ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà...\n")
    for symbol in symbols:
        try:
            df = get_binance_data(symbol=symbol, interval='1m', limit=200)
            df = compute_indicators(df)
            signals = detect_advanced_signals(df)  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô detect_advanced_signals ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á

            print(f"[{symbol}] ‡πÄ‡∏ß‡∏•‡∏≤: {df.iloc[-1]['timestamp']} üìà ‡∏£‡∏≤‡∏Ñ‡∏≤: {df.iloc[-1]['Close']:.2f}")
            if signals:
                for sig in signals:
                    print(f"üì¢ ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì: {sig}")
                    blink_signal(f"üö® {sig} üö®", duration=3)  # ‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÉ‡∏ô 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏∏‡∏î‡πÄ‡∏Ç‡πâ‡∏≤
                entry_price, stop_loss, take_profit = calculate_entry_price(df, signals)
                if entry_price is not None:
                    print(f"üìç ‡∏à‡∏∏‡∏î‡πÄ‡∏Ç‡πâ‡∏≤: {entry_price:.2f}, ‡∏à‡∏∏‡∏î Stop Loss: {stop_loss:.2f}, ‡∏à‡∏∏‡∏î Take Profit: {take_profit:.2f}")
            else:
                print("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ")
        except Exception as e:
            print(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö {symbol}: {e}")
    
    time.sleep(60)
